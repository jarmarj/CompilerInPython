import re
# import xlsxwriter

class Token:
    def __init__(self, token, value) -> None:
        self.token = token
        self.value = value
    def __str__(self) -> str:
        return f'{self.token} {self.value}'

class Lexico:
    index = 0
    value = ""
    state = 0
    results = []

    states = [
            # ["",	"\{",	"}",	"\[",	"]",	"\(",	"\)",	",",	";",	":",	"!",	"/",	"=",	"\*",	"<",	">",	"~",	"%",	"[a-z]","[0-9]","+",	"-",	"'",	'"',	"."],
            ["",	"\{",	"}",	"\[",	"]",	"\(",	"\)",	",",	";",	":",	"!",	"/",	"=",	"\*",	"<",	">",	"~",	"%",	"[a-z]","[0-9]","\+",	"-",	"'",	'"',	"."],
            ["0",	"1",	"2",	"3",	"4",	"5",	"6",	"7",	"8",	"9",	"100",	"16",	"100",	"31",	"21",	"24",	"33",	"35",	"36",	"37",	"27",	"29",	"43",	"45",	"100"],
            ["1",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200",	"200"],
            ["2",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201",	"201"],
            ["3",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202",	"202"],
            ["4",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203",	"203"],
            ["5",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204",	"204"],
            ["6",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205",	"205"],
            ["7",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206",	"206"],
            ["8",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207",	"207"],
            ["9",	"208",	"208",	"208",	"208",	"208",	"208",	"208",	"208",	"10",	"14",	"208",	"11",	"208",	"208",	"208",	"208",	"208",	"208",	"208",	"208",	"208",	"208",	"208",	"208"],
            ["10",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209",	"209"],
            ["11",	"210",	"210",	"210",	"210",	"210",	"210",	"210",	"210",	"12",	"210",	"210",	"210",	"210",	"210",	"210",	"210",	"210",	"210",	"210",	"210",	"210",	"210",	"210",	"210"],
            ["12",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"13",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100"],
            ["13",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211",	"211"],
            ["14",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"15",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100"],
            ["15",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212",	"212"],
            ["16",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"20",	"100",	"17",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100"],
            ["17",	"18",	"19",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100"],
            ["18",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214",	"214"],
            ["19",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215",	"215"],
            ["20",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213",	"213"],
            ["21",	"216",	"216",	"216",	"216",	"216",	"216",	"216",	"216",	"22",	"216",	"216",	"23",	"216",	"216",	"216",	"216",	"216",	"216",	"216",	"216",	"216",	"216",	"216",	"216"],
            ["22",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217",	"217"],
            ["23",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218",	"218"],
            ["24",	"219",	"219",	"219",	"219",	"219",	"219",	"219",	"219",	"25",	"219",	"219",	"26",	"219",	"219",	"219",	"219",	"219",	"219",	"219",	"219",	"219",	"219",	"219",	"219"],
            ["25",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220",	"220"],
            ["26",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221",	"221"],
            ["27",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"28",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"42",	"100",	"100",	"100",	"100",	"100"],
            ["28",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222",	"222"],
            ["29",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"30",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"42",	"100",	"100",	"100",	"100",	"100"],
            ["30",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223",	"223"],
            ["31",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"32",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100"],
            ["32",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224",	"224"],
            ["33",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"34",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100"],
            ["34",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225",	"225"],
            ["35",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"36",	"100",	"100",	"100",	"100",	"100",	"100"],
            ["36",	"226",	"226",	"226",	"226",	"226",	"226",	"226",	"226",	"226",	"226",	"226",	"226",	"226",	"226",	"226",	"226",	"226",	"36",	"36",	"40",	"41",	"44",	"46",	"226"],
            ["37",	"227",	"227",	"227",	"227",	"227",	"227",	"227",	"227",	"227",	"227",	"227",	"227",	"227",	"227",	"227",	"227",	"227",	"36",	"37",	"227",	"227",	"227",	"227",	"38"],
            ["38",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"39",	"100",	"100",	"100",	"100",	"100"],
            ["39",	"228",	"228",	"228",	"228",	"228",	"228",	"228",	"228",	"228",	"228",	"228",	"228",	"228",	"228",	"228",	"228",	"228",	"36",	"39",	"228",	"228",	"228",	"228",	"228"],
            ["40",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"42",	"100",	"100",	"100",	"100",	"100"],
            ["41",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"42",	"100",	"100",	"100",	"100",	"100"],
            ["42",	"229",	"229",	"229",	"229",	"229",	"229",	"229",	"229",	"229",	"229",	"229",	"229",	"229",	"229",	"229",	"229",	"229",	"229",	"42",	"229",	"229",	"229",	"229",	"229"],
            ["43",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"36",	"36",	"100",	"100",	"100",	"100",	"100"],
            ["44",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231",	"231"],
            ["45",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"100",	"36",	"36",	"100",	"100",	"100",	"100",	"100"],
            ["46",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232",	"232"]
        ]

    keywords = ["variables", "bloque", "principal", "entero", "cadena", "logico", "lista", "decimal", "begin", "end", "return", "mientras", "ciclo", "repetir", "sino", "para", "dentro", "imprimir",
                "texto", "otro", "rango", "y", "longitud", "esentero", "esdecimal", "entero", "decimal", "leer", "absoluto", "cadena", "potencia", "redondear", "sumar", "minimo", "maximo"]#, "si","o"]

    simbols = ['{','}','//{','//}','(',')','[',']',':=',':=:=',':!=','::',';','<','>','{','}',':=',',','~~','+:','-:','*:','/:','<:','>:','<=','>=']

    
    def read(self, source_code):
        ######
        # workbook = xlsxwriter.Workbook("arrays.xlsx")
        # worksheet = workbook.add_worksheet()
        #
        # row = 0"si
        #
        # for col, data in enumerate(s):
        #    worksheet.write_column(row, col, data)
        #
        # workbook.close()
        ######
        while(self.index != len(source_code)):
            actual_char = source_code[self.index]
            
            for x in range(1, len(self.states[0])):
                p = re.compile(self.states[0][x])
                # print(p)
                if (p.match(actual_char) != None):
                    # print(self.state)
                    if (self.state >= 200):
                        self.index -= 2
                        self.lexem()
                        self.state = 0
                        self.value = ""
                        break

                    self.state = int(self.states[self.state + 1][x])
                    self.value = self.value + actual_char
                    # print(self.state)
                    # print(self.value)
                    break

            self.index = self.index + 1

    def lexem(self):
        word = self.value[:-1]
        # print("PALABRA: ", word)
        if (word in self.keywords):
            self.results.append(Token('keyword', word))
            return
        p = re.compile("[a-z]")
        if p.match(word[0]):
            # self.results.append("Prueba " + word)
            self.split_keywords(word)
            return
        self.results.append(Token('symbol', word))

    def split_keywords(self, chain):
        temp_chain = ''

        for index, letter in enumerate(chain):
            temp_chain += letter
            # print(f'-{temp_chain}')
            for item in self.keywords:
                if temp_chain[0].__eq__('o'):
                    if index == len(chain)-1:
                        # print('reservada o')
                        self.results.append(Token('keyword', 'o'))
                        break
                    if len(temp_chain)>1:
                        if temp_chain[1] != 't':
                            temp_chain = temp_chain[1:]
                            # print('reservada o')
                            self.results.append(Token('keyword', 'o'))
                            continue
                        if temp_chain.__eq__('otro'):
                            # print(f'reservada {temp_chain}')
                            self.results.append(Token('keyword', temp_chain))
                            temp_chain = temp_chain[4:]
                            break
                        continue
                    continue
                    
                if temp_chain[:2].__eq__('si'):
                    if index == len(chain)-1:
                        # print('reservada si')
                        self.results.append(Token('keyword', 'si'))
                        break
                    if len(temp_chain)>2:
                        if temp_chain[2] != 'n':
                            temp_chain = temp_chain[2:]
                            # print('reservada si')
                            self.results.append(Token('keyword', 'si'))
                            continue
                        if temp_chain.__eq__('sino'):
                            # print(f'reservada {temp_chain}')
                            self.results.append(Token('keyword', temp_chain))
                            temp_chain = temp_chain[4:]
                            break
                        continue
                    continue

                if temp_chain.__eq__(item):
                    # print(f"reservada {temp_chain}")
                    self.results.append(Token('keyword', temp_chain))
                    temp_chain = ''
                    break

